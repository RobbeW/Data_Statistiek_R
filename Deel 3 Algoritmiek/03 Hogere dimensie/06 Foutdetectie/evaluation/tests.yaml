- tab: Feedback
  contexts:
  - testcases:
    - expression: detecteer([[0, 0], [0, 1]])
      description:
        description: "detecteer([[0, 0],\n           [0, 1]])"
        format: python
      return:
      - 1
      - 1
  - testcases:
    - expression: detecteer([[1, 1], [1, 0]])
      description:
        description: "detecteer([[1, 1],\n           [1, 0]])"
        format: python
      return:
      - 1
      - 1
  - testcases:
    - expression: detecteer([[0, 1, 0], [0, 1, 1], [0, 0, 0]])
      description:
        description: "detecteer([[0, 1, 0],\n           [0, 1, 1],\n           [0,
          0, 0]])"
        format: python
      return:
      - 0
      - 2
  - testcases:
    - expression: detecteer([[1, 0, 0, 1, 0], [1, 1, 0, 1, 0], [0, 1, 0, 1, 0], [0,
        1, 1, 1, 1], [0, 1, 1, 1, 1]])
      description:
        description: "detecteer([[1, 0, 0, 1, 0],\n           [1, 1, 0, 1, 0],\n \
          \          [0, 1, 0, 1, 0],\n           [0, 1, 1, 1, 1],\n           [0,
          1, 1, 1, 1]])"
        format: python
      return:
      - 1
      - 3
  - testcases:
    - expression: detecteer([[0, 0, 0, 0, 0], [0, 0, 0, 1, 1], [0, 1, 0, 1, 1], [0,
        1, 1, 0, 0], [0, 0, 0, 0, 0]])
      description:
        description: "detecteer([[0, 0, 0, 0, 0],\n           [0, 0, 0, 1, 1],\n \
          \          [0, 1, 0, 1, 1],\n           [0, 1, 1, 0, 0],\n           [0,
          0, 0, 0, 0]])"
        format: python
      return:
      - 2
      - 2
  - testcases:
    - expression: detecteer([[0, 1, 0, 0, 0], [0, 1, 0, 1, 0], [0, 1, 1, 1, 1], [0,
        0, 1, 1, 0], [0, 1, 1, 1, 1]])
      description:
        description: "detecteer([[0, 1, 0, 0, 0],\n           [0, 1, 0, 1, 0],\n \
          \          [0, 1, 1, 1, 1],\n           [0, 0, 1, 1, 0],\n           [0,
          1, 1, 1, 1]])"
        format: python
      return:
      - 0
      - 2
  - testcases:
    - expression: detecteer([[1, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 1, 0, 0], [1, 0,
        1, 0, 0, 0, 0], [0, 0, 1, 1, 1, 1, 0], [0, 1, 0, 1, 0, 1, 1], [1, 0, 0, 1,
        1, 1, 1], [1, 1, 1, 1, 1, 1, 0]])
      description:
        description: "detecteer([[1, 1, 1, 1, 0, 0, 0],\n           [0, 1, 0, 0, 1,
          0, 0],\n           [1, 0, 1, 0, 0, 0, 0],\n           [0, 0, 1, 1, 1, 1,
          0],\n           [0, 1, 0, 1, 0, 1, 1],\n           [1, 0, 0, 1, 1, 1, 1],\n\
          \           [1, 1, 1, 1, 1, 1, 0]])"
        format: python
      return:
      - 5
      - 3
  - testcases:
    - expression: detecteer([[1, 1, 0, 1, 0, 0, 1, 1], [0, 1, 1, 1, 1, 0, 0, 0], [1,
        1, 0, 1, 0, 1, 1, 1], [1, 1, 1, 0, 1, 1, 0, 1], [0, 1, 1, 0, 1, 0, 1, 0],
        [1, 1, 0, 0, 0, 1, 1, 0], [0, 1, 1, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1, 0,
        0]])
      description:
        description: "detecteer([[1, 1, 0, 1, 0, 0, 1, 1],\n           [0, 1, 1, 1,
          1, 0, 0, 0],\n           [1, 1, 0, 1, 0, 1, 1, 1],\n           [1, 1, 1,
          0, 1, 1, 0, 1],\n           [0, 1, 1, 0, 1, 0, 1, 0],\n           [1, 1,
          0, 0, 0, 1, 1, 0],\n           [0, 1, 1, 1, 0, 0, 0, 1],\n           [0,
          1, 0, 0, 0, 1, 0, 0]])"
        format: python
      return:
      - 0
      - 4
  - testcases:
    - expression: detecteer([[1, 0, 1, 1, 1, 0, 0, 0], [1, 1, 1, 1, 0, 1, 0, 1], [1,
        0, 1, 0, 0, 1, 1, 0], [0, 1, 1, 1, 1, 1, 1, 0], [1, 1, 1, 0, 0, 0, 0, 1],
        [1, 1, 0, 0, 0, 0, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1], [1, 0, 0, 0, 0, 1, 0,
        0]])
      description:
        description: "detecteer([[1, 0, 1, 1, 1, 0, 0, 0],\n           [1, 1, 1, 1,
          0, 1, 0, 1],\n           [1, 0, 1, 0, 0, 1, 1, 0],\n           [0, 1, 1,
          1, 1, 1, 1, 0],\n           [1, 1, 1, 0, 0, 0, 0, 1],\n           [1, 1,
          0, 0, 0, 0, 0, 1],\n           [0, 0, 0, 1, 0, 0, 0, 1],\n           [1,
          0, 0, 0, 0, 1, 0, 0]])"
        format: python
      return:
      - 5
      - 2
  - testcases:
    - expression: detecteer([[0, 0, 1, 0, 0, 1, 1, 1, 1], [1, 0, 1, 0, 1, 0, 0, 0,
        1], [0, 0, 1, 1, 1, 0, 0, 1, 0], [0, 1, 0, 1, 1, 0, 0, 0, 1], [0, 1, 0, 0,
        0, 0, 1, 1, 1], [1, 1, 0, 1, 1, 0, 1, 0, 1], [1, 0, 0, 0, 1, 0, 1, 1, 0],
        [0, 0, 0, 0, 0, 1, 1, 1, 1], [1, 1, 1, 0, 1, 0, 1, 1, 0]])
      description:
        description: "detecteer([[0, 0, 1, 0, 0, 1, 1, 1, 1],\n           [1, 0, 1,
          0, 1, 0, 0, 0, 1],\n           [0, 0, 1, 1, 1, 0, 0, 1, 0],\n          \
          \ [0, 1, 0, 1, 1, 0, 0, 0, 1],\n           [0, 1, 0, 0, 0, 0, 1, 1, 1],\n\
          \           [1, 1, 0, 1, 1, 0, 1, 0, 1],\n           [1, 0, 0, 0, 1, 0,
          1, 1, 0],\n           [0, 0, 0, 0, 0, 1, 1, 1, 1],\n           [1, 1, 1,
          0, 1, 0, 1, 1, 0]])"
        format: python
      return:
      - 0
      - 3
  - testcases:
    - expression: detecteer([[1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 1, 1, 0, 1,
        0, 0, 1, 0, 1], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 1, 0, 0, 1, 1, 1, 1,
        0, 1, 1], [0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1], [0, 0, 0, 0, 1, 0, 1, 1, 0, 0,
        1], [1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0], [0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1],
        [0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1], [1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0], [0,
        0, 0, 1, 0, 0, 0, 1, 0, 0, 0]])
      description:
        description: "detecteer([[1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1],\n           [0,
          1, 1, 1, 0, 1, 0, 0, 1, 0, 1],\n           [1, 1, 0, 0, 1, 1, 1, 0, 0, 0,
          1],\n           [0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1],\n           [0, 1, 1,
          1, 0, 1, 0, 1, 1, 1, 1],\n           [0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1],\n\
          \           [1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0],\n           [0, 1, 1, 0,
          0, 0, 0, 1, 1, 1, 1],\n           [0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1],\n \
          \          [1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0],\n           [0, 0, 0, 1, 0,
          0, 0, 1, 0, 0, 0]])"
        format: python
      return:
      - 3
      - 9
  - testcases:
    - expression: detecteer([[1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1], [0, 1,
        0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1,
        1, 1, 0, 1], [1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1], [0, 1, 0, 1, 0,
        0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0,
        0], [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1], [0, 0, 0, 0, 1, 1, 0, 0,
        0, 1, 1, 1, 0, 1, 0], [1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0], [0, 1,
        1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1,
        0, 0, 0, 1], [1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0], [1, 1, 1, 1, 0,
        1, 1, 0, 1, 1, 0, 1, 0, 1, 0], [0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1,
        1], [0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1]])
      description:
        description: "detecteer([[1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1],\n\
          \           [0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0],\n           [0,
          1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1],\n           [1, 1, 1, 0, 1, 1,
          0, 1, 0, 1, 1, 1, 1, 1, 1],\n           [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0,
          1, 0, 1, 1],\n           [1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0],\n\
          \           [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1],\n           [0,
          0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0],\n           [1, 0, 1, 1, 0, 0,
          1, 0, 1, 1, 1, 0, 1, 1, 0],\n           [0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
          0, 0, 0, 0],\n           [1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1],\n\
          \           [1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0],\n           [1,
          1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0],\n           [0, 1, 1, 0, 1, 0,
          0, 0, 1, 1, 1, 0, 0, 1, 1],\n           [0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1,
          0, 0, 0, 1]])"
        format: python
      return:
      - 8
      - 12
  - testcases:
    - expression: detecteer([[0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1],
        [0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1], [0, 1, 0, 1, 0, 0, 1,
        1, 1, 1, 0, 0, 0, 1, 0, 0, 1], [0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1,
        0, 1, 1], [1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1,
        1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1], [1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1,
        0, 1, 0, 0, 1, 0], [1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0], [0,
        1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0], [1, 0, 0, 1, 1, 0, 1, 0,
        0, 1, 1, 1, 1, 1, 0, 1, 0], [0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1,
        0, 1], [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1], [0, 1, 0, 0, 1,
        1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1], [0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0,
        1, 1, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0], [1, 0,
        1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0], [0, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 0, 1, 1, 1, 1, 1, 0]])
      description:
        description: "detecteer([[0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0,
          1],\n           [0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1],\n \
          \          [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1],\n      \
          \     [0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1],\n           [1,
          0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0],\n           [1, 0, 1, 1,
          1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1],\n           [1, 1, 0, 0, 1, 1, 0,
          0, 1, 0, 1, 0, 1, 0, 0, 1, 0],\n           [1, 1, 0, 1, 1, 0, 0, 1, 0, 1,
          0, 0, 0, 1, 1, 0, 0],\n           [0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1,
          0, 1, 0, 0],\n           [1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1,
          0],\n           [0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1],\n \
          \          [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1],\n      \
          \     [0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1],\n           [0,
          1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0],\n           [0, 1, 1, 1,
          0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0],\n           [1, 0, 1, 0, 0, 1, 1,
          1, 0, 0, 0, 1, 1, 1, 0, 0, 0],\n           [0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
          0, 1, 1, 1, 1, 1, 0]])"
        format: python
      return:
      - 13
      - 13
  - testcases:
    - expression: detecteer([[0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0],
        [1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1], [1, 1, 0, 0, 0, 0, 0,
        1, 1, 0, 1, 1, 1, 1, 1, 1, 0], [0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0,
        1, 1, 1], [1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1], [0, 0, 0, 0,
        1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1], [1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1,
        1, 0, 0, 1, 1, 1], [0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0], [1,
        1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1], [0, 0, 0, 1, 1, 0, 0, 0,
        0, 1, 1, 0, 0, 0, 0, 1, 1], [1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1,
        1, 1], [1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 1, 1, 1, 1,
        1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0,
        1, 0, 0, 1, 0], [1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1], [0, 0,
        1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1], [0, 0, 0, 0, 0, 1, 1, 1, 0,
        0, 0, 0, 0, 1, 1, 0, 0]])
      description:
        description: "detecteer([[0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0,
          0],\n           [1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1],\n \
          \          [1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0],\n      \
          \     [0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1],\n           [1,
          0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1],\n           [0, 0, 0, 0,
          1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1],\n           [1, 1, 1, 1, 1, 1, 0,
          1, 0, 0, 1, 1, 0, 0, 1, 1, 1],\n           [0, 1, 1, 1, 1, 1, 0, 0, 0, 0,
          1, 1, 1, 1, 1, 0, 0],\n           [1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1,
          1, 1, 0, 1],\n           [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1,
          1],\n           [1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1],\n \
          \          [1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1],\n      \
          \     [0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1],\n           [0,
          1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0],\n           [1, 0, 1, 1,
          1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1],\n           [0, 0, 1, 1, 1, 0, 1,
          0, 0, 0, 0, 1, 0, 1, 1, 0, 1],\n           [0, 0, 0, 0, 0, 1, 1, 1, 0, 0,
          0, 0, 0, 1, 1, 0, 0]])"
        format: python
      return:
      - 16
      - 6
  - testcases:
    - expression: detecteer([[1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1],
        [1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0], [1, 1, 0, 0, 1, 1,
        0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0,
        1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1],
        [1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1], [1, 0, 0, 0, 1, 0,
        0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1], [0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0,
        0, 0, 1, 1, 1, 0], [1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0],
        [1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0], [1, 0, 1, 0, 0, 1,
        0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1], [1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0,
        1, 1, 0, 0, 0, 0], [1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0],
        [0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0], [0, 1, 1, 0, 0, 1,
        1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0], [0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0,
        0, 1, 0, 1, 1, 1], [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0],
        [1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1]])
      description:
        description: "detecteer([[1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0,
          0, 1],\n           [1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0],\n\
          \           [1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0],\n  \
          \         [0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1],\n    \
          \       [0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1],\n      \
          \     [1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1],\n        \
          \   [1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1],\n          \
          \ [0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0],\n           [1,
          1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0],\n           [1, 0, 1,
          1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0],\n           [1, 0, 1, 0, 0,
          1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1],\n           [1, 1, 0, 1, 1, 1, 0,
          1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0],\n           [1, 1, 1, 0, 1, 0, 1, 0, 1,
          1, 0, 1, 1, 0, 0, 1, 0, 0],\n           [0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0,
          1, 1, 1, 1, 0, 1, 0],\n           [0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1,
          0, 0, 1, 0, 0],\n           [0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0,
          1, 1, 1],\n           [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1,
          0],\n           [1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1]])"
        format: python
      return:
      - 8
      - 8
  - testcases:
    - expression: detecteer([[0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0,
        1], [1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0], [1, 1, 1, 0,
        0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0], [1, 1, 1, 0, 1, 0, 1, 1, 1,
        0, 0, 0, 0, 1, 0, 0, 1, 0, 1], [1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0,
        0, 1, 1, 1, 1], [0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1],
        [1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0], [1, 1, 0, 1, 1,
        0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0], [0, 1, 0, 1, 1, 1, 1, 0, 1, 0,
        1, 0, 0, 0, 1, 0, 0, 1, 1], [1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0,
        0, 0, 1, 0], [0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0], [1,
        0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0,
        1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0], [0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1,
        0, 0, 0, 0, 0, 0, 1, 0], [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1,
        0, 0, 0], [1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 0,
        0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0], [0, 1, 1, 0, 0, 1, 0,
        1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0], [1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1,
        0, 1, 0, 0, 1, 0, 1]])
      description:
        description: "detecteer([[0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1,
          0, 0, 1],\n           [1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1,
          0, 0],\n           [1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0,
          0],\n           [1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1],\n\
          \           [1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1],\n\
          \           [0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1],\n\
          \           [1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0],\n\
          \           [1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0],\n\
          \           [0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1],\n\
          \           [1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0],\n\
          \           [0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0],\n\
          \           [1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1],\n\
          \           [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0],\n\
          \           [0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0],\n\
          \           [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0],\n\
          \           [1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1],\n\
          \           [1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0],\n\
          \           [0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0],\n\
          \           [1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1]])"
        format: python
      return:
      - 7
      - 7
  - testcases:
    - expression: detecteer([[0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1,
        1], [1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], [1, 0, 0, 1,
        0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 1, 1, 0, 0, 1,
        0, 1, 0, 1, 1, 0, 0, 1, 0, 1], [1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0,
        0, 1, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1],
        [1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 1, 1, 1, 0,
        0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0,
        1, 1, 1, 1, 1, 1, 1, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0,
        0, 1, 0, 0], [1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1], [0,
        1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [1, 0, 1, 1, 0, 0,
        0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0], [1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1,
        1, 1, 1, 0, 0, 1, 0, 1], [0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1,
        1, 0, 1], [1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0], [0, 0,
        1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [1, 1, 0, 0, 0, 0, 1,
        0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1], [0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0,
        0, 0, 0, 1, 1, 1, 1]])
      description:
        description: "detecteer([[0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0,
          1, 1, 1],\n           [1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0,
          1, 0],\n           [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1,
          1],\n           [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1],\n\
          \           [1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1],\n\
          \           [0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1],\n\
          \           [1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1],\n\
          \           [1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0],\n\
          \           [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1],\n\
          \           [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0],\n\
          \           [1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1],\n\
          \           [0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1],\n\
          \           [1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0],\n\
          \           [1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1],\n\
          \           [0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1],\n\
          \           [1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0],\n\
          \           [0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1],\n\
          \           [1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1],\n\
          \           [0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1]])"
        format: python
      return:
      - 8
      - 16
  - testcases:
    - expression: detecteer([[1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0,
        1, 0], [0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 1,
        1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0], [1, 0, 0, 1, 1, 1,
        1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1], [1, 1, 1, 0, 1, 1, 0, 1, 1, 0,
        0, 0, 1, 0, 1, 1, 1, 0, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1,
        0, 1, 0, 0, 1, 0], [1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0,
        0, 1], [0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0], [1, 0,
        1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0], [1, 0, 1, 1, 1, 1,
        0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
        1, 0, 0, 1, 1, 1, 0, 1, 0, 0], [0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1,
        1, 0, 0, 0, 1, 0], [1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0,
        0, 0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [0, 0,
        0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1], [1, 0, 0, 0, 1, 0,
        0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0], [1, 1, 0, 0, 1, 1, 0, 1, 0, 1,
        0, 0, 0, 1, 1, 0, 1, 1, 0, 0], [0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0,
        0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1,
        1, 1], [1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0]])
      description:
        description: "detecteer([[1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1,
          1, 0, 1, 0],\n           [0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1,
          1, 1, 1, 0],\n           [0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0,
          1, 0, 1, 0],\n           [1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0,
          1, 0, 0, 1],\n           [1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1,
          1, 0, 0, 1],\n           [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1,
          0, 0, 1, 0],\n           [1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1,
          0, 0, 0, 1],\n           [0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1,
          0, 1, 0, 0],\n           [1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1,
          0, 1, 0, 0],\n           [1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1,
          1, 1, 0, 1],\n           [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1,
          0, 1, 0, 0],\n           [0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0,
          0, 0, 1, 0],\n           [1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1,
          1, 0, 0, 0],\n           [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1,
          0, 0, 1, 1],\n           [0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0,
          1, 1, 0, 1],\n           [1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0,
          0, 0, 1, 0],\n           [1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0,
          1, 1, 0, 0],\n           [0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0,
          0, 0, 0, 1],\n           [1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0,
          1, 1, 1, 1],\n           [1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1,
          0, 0, 0, 0]])"
        format: python
      return:
      - 11
      - 12
  - testcases:
    - expression: detecteer([[0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1,
        1, 0], [0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1], [0, 1,
        0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0], [1, 0, 0, 1, 0, 0,
        1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 0,
        0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1,
        1, 0, 0, 0, 1, 0], [1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1,
        0, 1], [0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1], [1, 1,
        1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0], [1, 0, 0, 0, 1, 0,
        1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0], [1, 0, 1, 0, 1, 0, 1, 1, 0, 0,
        1, 0, 0, 1, 0, 0, 0, 0, 0, 1], [0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0,
        1, 1, 0, 1, 1, 0], [1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0,
        1, 1], [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1], [1, 0,
        1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 1, 0,
        1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0], [0, 1, 1, 0, 1, 0, 1, 1, 1, 1,
        0, 0, 1, 0, 0, 0, 0, 0, 1, 1], [0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1,
        0, 0, 1, 0, 1, 1], [1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0,
        0, 1], [1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0]])
      description:
        description: "detecteer([[0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1,
          1, 1, 1, 0],\n           [0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0,
          0, 0, 1, 1],\n           [0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0,
          1, 1, 1, 0],\n           [1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0,
          1, 0, 0, 1],\n           [0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1,
          1, 0, 1, 1],\n           [1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0,
          0, 0, 1, 0],\n           [1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1,
          1, 1, 0, 1],\n           [0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1,
          1, 1, 0, 1],\n           [1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0,
          0, 0, 0, 0],\n           [1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1,
          1, 1, 1, 0],\n           [1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0,
          0, 0, 0, 1],\n           [0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1,
          0, 1, 1, 0],\n           [1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1,
          0, 0, 1, 1],\n           [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0,
          1, 1, 1, 1],\n           [1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0,
          0, 0, 0, 1],\n           [1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0,
          1, 0, 0, 0],\n           [0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0,
          0, 0, 1, 1],\n           [0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0,
          1, 0, 1, 1],\n           [1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1,
          1, 0, 0, 1],\n           [1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0,
          1, 1, 1, 0]])"
        format: python
      return:
      - 4
      - 0
  - testcases:
    - expression: detecteer([[1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1,
        0, 1, 1], [1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1],
        [1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0], [1, 1, 1,
        0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0], [1, 0, 0, 1, 1, 0,
        0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0], [0, 0, 0, 0, 1, 0, 1, 0, 0,
        1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1,
        0, 1, 0, 0, 0, 0, 0, 1, 1], [0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1,
        0, 0, 1, 1, 1, 0], [0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0,
        0, 0, 0], [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0],
        [0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0], [1, 0, 1,
        0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 0,
        0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 1,
        0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0], [1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0,
        0, 1, 1, 0, 0, 1, 0, 0, 0], [0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0,
        1, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1,
        0, 0, 1], [1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1],
        [0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 1, 1,
        1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1], [0, 1, 0, 0, 1, 1,
        1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0]])
      description:
        description: "detecteer([[1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1,
          1, 1, 0, 1, 1],\n           [1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0,
          1, 1, 1, 1, 0, 1],\n           [1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1,
          1, 0, 1, 1, 0, 0, 0],\n           [1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0,
          0, 1, 1, 1, 0, 0, 1, 0],\n           [1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1,
          0, 1, 0, 1, 0, 1, 1, 1, 0],\n           [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0,
          0, 0, 0, 1, 0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
          1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1],\n           [0, 1, 0, 0, 0, 0, 1, 0, 1,
          0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0],\n           [0, 1, 0, 0, 1, 0, 1, 1,
          0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0],\n           [1, 1, 0, 1, 0, 0, 0,
          0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0],\n           [0, 1, 1, 1, 0, 0,
          0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0],\n           [1, 0, 1, 0, 1,
          0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1],\n           [1, 1, 0, 1,
          1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0],\n           [0, 0, 0,
          0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0],\n           [1, 1,
          1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0],\n           [0,
          1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1],\n         \
          \  [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],\n  \
          \         [1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1],\n\
          \           [0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1,
          0],\n           [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0,
          0, 1],\n           [0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,
          0, 1, 0]])"
        format: python
      return:
      - 11
      - 17
