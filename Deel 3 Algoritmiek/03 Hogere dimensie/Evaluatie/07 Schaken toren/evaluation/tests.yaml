- tab: Feedback
  contexts:
  - testcases:
    - expression: toren([[' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '], [' ', ' ', ' ',
        'p', ' ', ' ', ' ', ' '], [' ', ' ', ' ', 'T', ' ', ' ', ' ', 'p'], [' ',
        ' ', ' ', ' ', ' ', ' ', ' ', ' '], [' ', ' ', ' ', ' ', ' ', ' ', ' ', '
        '], [' ', ' ', ' ', 'p', ' ', ' ', ' ', ' '], [' ', ' ', ' ', ' ', ' ', '
        ', ' ', ' '], [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ']])
      description:
        description: "toren([[\" \", \" \", \" \", \" \", \" \", \" \", \" \", \"
          \"],\n       [\" \", \" \", \" \", \"p\", \" \", \" \", \" \", \" \"],\n\
          \       [\" \", \" \", \" \", \"T\", \" \", \" \", \" \", \"p\"],\n    \
          \   [\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n       [\"\
          \ \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n       [\" \",
          \" \", \" \", \"p\", \" \", \" \", \" \", \" \"],\n       [\" \", \" \",
          \" \", \" \", \" \", \" \", \" \", \" \"],\n       [\" \", \" \", \" \"\
          , \" \", \" \", \" \", \" \", \" \"]])"
        format: python
      return: 3
  - testcases:
    - expression: toren([[' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '], [' ', ' ', ' ',
        'p', ' ', ' ', ' ', ' '], [' ', ' ', 'p', 'L', 'p', ' ', ' ', ' '], [' ',
        'p', 'L', 'T', 'L', 'p', ' ', ' '], [' ', ' ', 'p', 'L', 'p', ' ', ' ', '
        '], [' ', ' ', ' ', 'p', ' ', ' ', ' ', ' '], [' ', ' ', ' ', ' ', ' ', '
        ', ' ', ' '], [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ']])
      description:
        description: "toren([[\" \", \" \", \" \", \" \", \" \", \" \", \" \", \"
          \"],\n       [\" \", \" \", \" \", \"p\", \" \", \" \", \" \", \" \"],\n\
          \       [\" \", \" \", \"p\", \"L\", \"p\", \" \", \" \", \" \"],\n    \
          \   [\" \", \"p\", \"L\", \"T\", \"L\", \"p\", \" \", \" \"],\n       [\"\
          \ \", \" \", \"p\", \"L\", \"p\", \" \", \" \", \" \"],\n       [\" \",
          \" \", \" \", \"p\", \" \", \" \", \" \", \" \"],\n       [\" \", \" \",
          \" \", \" \", \" \", \" \", \" \", \" \"],\n       [\" \", \" \", \" \"\
          , \" \", \" \", \" \", \" \", \" \"]])"
        format: python
      return: 0
  - testcases:
    - expression: toren([[' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '], [' ', ' ', ' ',
        'p', ' ', ' ', ' ', ' '], [' ', ' ', 'L', 'p', 'p', ' ', ' ', ' '], ['p',
        'p', ' ', 'T', ' ', 'p', 'L', ' '], [' ', ' ', ' ', ' ', ' ', ' ', ' ', '
        '], [' ', ' ', ' ', 'L', ' ', ' ', ' ', ' '], [' ', ' ', ' ', 'p', ' ', '
        ', ' ', ' '], [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ']])
      description:
        description: "toren([[\" \", \" \", \" \", \" \", \" \", \" \", \" \", \"
          \"],\n       [\" \", \" \", \" \", \"p\", \" \", \" \", \" \", \" \"],\n\
          \       [\" \", \" \", \"L\", \"p\", \"p\", \" \", \" \", \" \"],\n    \
          \   [\"p\", \"p\", \" \", \"T\", \" \", \"p\", \"L\", \" \"],\n       [\"\
          \ \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n       [\" \",
          \" \", \" \", \"L\", \" \", \" \", \" \", \" \"],\n       [\" \", \" \",
          \" \", \"p\", \" \", \" \", \" \", \" \"],\n       [\" \", \" \", \" \"\
          , \" \", \" \", \" \", \" \", \" \"]])"
        format: python
      return: 3
  - testcases:
    - expression: toren([[' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '], [' ', ' ', 'p',
        'T', ' ', 'p', ' ', ' '], [' ', ' ', ' ', ' ', 'p', ' ', ' ', ' '], [' ',
        ' ', ' ', ' ', ' ', ' ', ' ', ' '], [' ', ' ', ' ', ' ', ' ', ' ', ' ', '
        '], ['p', ' ', ' ', 'p', ' ', ' ', ' ', ' '], [' ', ' ', ' ', ' ', ' ', '
        ', ' ', ' '], ['p', ' ', ' ', 'p', ' ', ' ', ' ', ' ']])
      description:
        description: "toren([[\" \", \" \", \" \", \" \", \" \", \" \", \" \", \"
          \"],\n       [\" \", \" \", \"p\", \"T\", \" \", \"p\", \" \", \" \"],\n\
          \       [\" \", \" \", \" \", \" \", \"p\", \" \", \" \", \" \"],\n    \
          \   [\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n       [\"\
          \ \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n       [\"p\",
          \" \", \" \", \"p\", \" \", \" \", \" \", \" \"],\n       [\" \", \" \",
          \" \", \" \", \" \", \" \", \" \", \" \"],\n       [\"p\", \" \", \" \"\
          , \"p\", \" \", \" \", \" \", \" \"]])"
        format: python
      return: 3
  - testcases:
    - expression: toren([[' ', ' ', 'p', ' ', ' ', 'p', ' ', ' '], [' ', ' ', ' ',
        ' ', ' ', ' ', 'p', 'p'], [' ', ' ', ' ', ' ', ' ', ' ', 'p', 'p'], [' ',
        ' ', 'p', 'p', ' ', ' ', ' ', ' '], [' ', ' ', ' ', 'p', 'p', ' ', ' ', '
        '], ['T', ' ', ' ', ' ', ' ', ' ', ' ', ' '], [' ', ' ', 'p', ' ', ' ', '
        ', ' ', 'p'], ['L', ' ', ' ', ' ', ' ', ' ', ' ', ' ']])
      description:
        description: "toren([[\" \", \" \", \"p\", \" \", \" \", \"p\", \" \", \"
          \"],\n       [\" \", \" \", \" \", \" \", \" \", \" \", \"p\", \"p\"],\n\
          \       [\" \", \" \", \" \", \" \", \" \", \" \", \"p\", \"p\"],\n    \
          \   [\" \", \" \", \"p\", \"p\", \" \", \" \", \" \", \" \"],\n       [\"\
          \ \", \" \", \" \", \"p\", \"p\", \" \", \" \", \" \"],\n       [\"T\",
          \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n       [\" \", \" \",
          \"p\", \" \", \" \", \" \", \" \", \"p\"],\n       [\"L\", \" \", \" \"\
          , \" \", \" \", \" \", \" \", \" \"]])"
        format: python
      return: 0
  - testcases:
    - expression: toren([[' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '], [' ', ' ', ' ',
        ' ', ' ', 'p', ' ', ' '], [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '], ['p',
        ' ', ' ', ' ', 'p', 'p', ' ', 'p'], [' ', ' ', ' ', ' ', 'p', 'p', ' ', '
        '], [' ', 'p', ' ', ' ', ' ', ' ', 'T', ' '], ['p', 'p', ' ', ' ', ' ', 'p',
        ' ', ' '], [' ', 'L', ' ', ' ', ' ', 'p', ' ', ' ']])
      description:
        description: "toren([[\" \", \" \", \" \", \" \", \" \", \" \", \" \", \"
          \"],\n       [\" \", \" \", \" \", \" \", \" \", \"p\", \" \", \" \"],\n\
          \       [\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n    \
          \   [\"p\", \" \", \" \", \" \", \"p\", \"p\", \" \", \"p\"],\n       [\"\
          \ \", \" \", \" \", \" \", \"p\", \"p\", \" \", \" \"],\n       [\" \",
          \"p\", \" \", \" \", \" \", \" \", \"T\", \" \"],\n       [\"p\", \"p\",
          \" \", \" \", \" \", \"p\", \" \", \" \"],\n       [\" \", \"L\", \" \"\
          , \" \", \" \", \"p\", \" \", \" \"]])"
        format: python
      return: 1
  - testcases:
    - expression: toren([[' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '], [' ', ' ', 'p',
        ' ', ' ', ' ', ' ', ' '], [' ', ' ', ' ', ' ', ' ', ' ', 'L', 'p'], [' ',
        ' ', 'p', ' ', ' ', ' ', ' ', ' '], [' ', ' ', 'p', ' ', ' ', ' ', ' ', '
        '], [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '], [' ', ' ', ' ', ' ', ' ', '
        ', ' ', ' '], [' ', ' ', ' ', 'T', ' ', ' ', ' ', ' ']])
      description:
        description: "toren([[\" \", \" \", \" \", \" \", \" \", \" \", \" \", \"
          \"],\n       [\" \", \" \", \"p\", \" \", \" \", \" \", \" \", \" \"],\n\
          \       [\" \", \" \", \" \", \" \", \" \", \" \", \"L\", \"p\"],\n    \
          \   [\" \", \" \", \"p\", \" \", \" \", \" \", \" \", \" \"],\n       [\"\
          \ \", \" \", \"p\", \" \", \" \", \" \", \" \", \" \"],\n       [\" \",
          \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n       [\" \", \" \",
          \" \", \" \", \" \", \" \", \" \", \" \"],\n       [\" \", \" \", \" \"\
          , \"T\", \" \", \" \", \" \", \" \"]])"
        format: python
      return: 0
  - testcases:
    - expression: toren([[' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '], [' ', ' ', ' ',
        ' ', ' ', ' ', ' ', ' '], [' ', ' ', ' ', ' ', ' ', 'L', ' ', ' '], [' ',
        ' ', ' ', ' ', 'p', ' ', ' ', ' '], [' ', ' ', ' ', 'L', ' ', ' ', ' ', 'L'],
        [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '], [' ', ' ', ' ', 'p', ' ', ' ', '
        ', ' '], ['p', ' ', ' ', ' ', ' ', ' ', 'T', 'p']])
      description:
        description: "toren([[\" \", \" \", \" \", \" \", \" \", \" \", \" \", \"
          \"],\n       [\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n\
          \       [\" \", \" \", \" \", \" \", \" \", \"L\", \" \", \" \"],\n    \
          \   [\" \", \" \", \" \", \" \", \"p\", \" \", \" \", \" \"],\n       [\"\
          \ \", \" \", \" \", \"L\", \" \", \" \", \" \", \"L\"],\n       [\" \",
          \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n       [\" \", \" \",
          \" \", \"p\", \" \", \" \", \" \", \" \"],\n       [\"p\", \" \", \" \"\
          , \" \", \" \", \" \", \"T\", \"p\"]])"
        format: python
      return: 2
  - testcases:
    - expression: toren([[' ', ' ', ' ', 'L', ' ', ' ', ' ', ' '], [' ', ' ', ' ',
        ' ', ' ', ' ', ' ', ' '], ['L', ' ', ' ', ' ', ' ', ' ', 'T', ' '], [' ',
        ' ', ' ', 'p', ' ', 'L', 'p', ' '], [' ', ' ', ' ', ' ', ' ', ' ', ' ', '
        '], [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '], [' ', ' ', ' ', ' ', ' ', '
        ', ' ', ' '], [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ']])
      description:
        description: "toren([[\" \", \" \", \" \", \"L\", \" \", \" \", \" \", \"
          \"],\n       [\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n\
          \       [\"L\", \" \", \" \", \" \", \" \", \" \", \"T\", \" \"],\n    \
          \   [\" \", \" \", \" \", \"p\", \" \", \"L\", \"p\", \" \"],\n       [\"\
          \ \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n       [\" \",
          \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n       [\" \", \" \",
          \" \", \" \", \" \", \" \", \" \", \" \"],\n       [\" \", \" \", \" \"\
          , \" \", \" \", \" \", \" \", \" \"]])"
        format: python
      return: 1
  - testcases:
    - expression: toren([[' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '], ['p', ' ', 'p',
        ' ', ' ', ' ', ' ', 'p'], [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '], [' ',
        ' ', ' ', ' ', 'L', 'p', ' ', ' '], ['p', 'T', ' ', ' ', ' ', ' ', ' ', '
        '], ['L', ' ', ' ', 'p', ' ', ' ', ' ', ' '], [' ', ' ', ' ', 'p', ' ', '
        ', ' ', ' '], [' ', ' ', ' ', 'L', 'p', ' ', 'L', 'p']])
      description:
        description: "toren([[\" \", \" \", \" \", \" \", \" \", \" \", \" \", \"
          \"],\n       [\"p\", \" \", \"p\", \" \", \" \", \" \", \" \", \"p\"],\n\
          \       [\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n    \
          \   [\" \", \" \", \" \", \" \", \"L\", \"p\", \" \", \" \"],\n       [\"\
          p\", \"T\", \" \", \" \", \" \", \" \", \" \", \" \"],\n       [\"L\", \"\
          \ \", \" \", \"p\", \" \", \" \", \" \", \" \"],\n       [\" \", \" \",
          \" \", \"p\", \" \", \" \", \" \", \" \"],\n       [\" \", \" \", \" \"
          , \"L\", \"p\", \" \", \"L\", \"p\"]])"
        format: python
      return: 1
  - testcases:
    - expression: toren([[' ', 'L', 'p', ' ', 'p', ' ', 'p', ' '], ['p', ' ', 'p',
        'p', ' ', ' ', 'p', 'T'], [' ', ' ', 'p', ' ', ' ', 'p', ' ', ' '], ['p',
        ' ', ' ', ' ', ' ', ' ', ' ', ' '], [' ', 'p', ' ', ' ', ' ', ' ', ' ', '
        '], ['L', ' ', ' ', ' ', ' ', ' ', ' ', ' '], ['p', 'p', ' ', ' ', ' ', '
        ', ' ', ' '], ['L', ' ', ' ', 'p', 'p', ' ', ' ', ' ']])
      description:
        description: "toren([[\" \", \"L\", \"p\", \" \", \"p\", \" \", \"p\", \"
          \"],\n       [\"p\", \" \", \"p\", \"p\", \" \", \" \", \"p\", \"T\"],\n\
          \       [\" \", \" \", \"p\", \" \", \" \", \"p\", \" \", \" \"],\n    \
          \   [\"p\", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n       [\"\
          \ \", \"p\", \" \", \" \", \" \", \" \", \" \", \" \"],\n       [\"L\",
          \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n       [\"p\", \"p\",
          \" \", \" \", \" \", \" \", \" \", \" \"],\n       [\"L\", \" \", \" \"\
          , \"p\", \"p\", \" \", \" \", \" \"]])"
        format: python
      return: 1
  - testcases:
    - expression: toren([[' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '], [' ', 'T', ' ',
        ' ', ' ', 'p', ' ', ' '], [' ', 'p', ' ', ' ', 'L', ' ', ' ', ' '], [' ',
        ' ', ' ', ' ', ' ', ' ', ' ', ' '], [' ', ' ', ' ', ' ', ' ', ' ', ' ', '
        '], [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '], [' ', ' ', ' ', ' ', ' ', '
        ', ' ', 'L'], [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ']])
      description:
        description: "toren([[\" \", \" \", \" \", \" \", \" \", \" \", \" \", \"
          \"],\n       [\" \", \"T\", \" \", \" \", \" \", \"p\", \" \", \" \"],\n\
          \       [\" \", \"p\", \" \", \" \", \"L\", \" \", \" \", \" \"],\n    \
          \   [\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n       [\"\
          \ \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n       [\" \",
          \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n       [\" \", \" \",
          \" \", \" \", \" \", \" \", \" \", \"L\"],\n       [\" \", \" \", \" \"\
          , \" \", \" \", \" \", \" \", \" \"]])"
        format: python
      return: 2
  - testcases:
    - expression: toren([[' ', 'p', ' ', ' ', ' ', ' ', ' ', ' '], ['L', ' ', ' ',
        ' ', ' ', ' ', ' ', ' '], [' ', 'p', 'p', 'T', 'L', 'p', ' ', ' '], [' ',
        ' ', ' ', ' ', ' ', 'p', ' ', ' '], [' ', ' ', 'p', ' ', 'p', ' ', ' ', 'p'],
        [' ', ' ', 'p', ' ', ' ', ' ', ' ', ' '], [' ', ' ', 'p', ' ', ' ', ' ', 'p',
        ' '], [' ', ' ', 'p', ' ', ' ', ' ', 'p', ' ']])
      description:
        description: "toren([[\" \", \"p\", \" \", \" \", \" \", \" \", \" \", \"
          \"],\n       [\"L\", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n\
          \       [\" \", \"p\", \"p\", \"T\", \"L\", \"p\", \" \", \" \"],\n    \
          \   [\" \", \" \", \" \", \" \", \" \", \"p\", \" \", \" \"],\n       [\"\
          \ \", \" \", \"p\", \" \", \"p\", \" \", \" \", \"p\"],\n       [\" \",
          \" \", \"p\", \" \", \" \", \" \", \" \", \" \"],\n       [\" \", \" \",
          \"p\", \" \", \" \", \" \", \"p\", \" \"],\n       [\" \", \" \", \"p\"\
          , \" \", \" \", \" \", \"p\", \" \"]])"
        format: python
      return: 1
  - testcases:
    - expression: toren([[' ', ' ', ' ', 'L', ' ', ' ', ' ', ' '], ['p', ' ', ' ',
        ' ', ' ', ' ', ' ', ' '], ['p', ' ', ' ', ' ', 'p', 'p', 'p', ' '], [' ',
        'p', ' ', 'p', 'p', 'p', 'p', ' '], ['L', ' ', ' ', ' ', ' ', ' ', ' ', '
        '], [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '], ['p', ' ', ' ', ' ', ' ', '
        ', 'p', ' '], [' ', ' ', ' ', ' ', 'p', ' ', ' ', 'T']])
      description:
        description: "toren([[\" \", \" \", \" \", \"L\", \" \", \" \", \" \", \"
          \"],\n       [\"p\", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n\
          \       [\"p\", \" \", \" \", \" \", \"p\", \"p\", \"p\", \" \"],\n    \
          \   [\" \", \"p\", \" \", \"p\", \"p\", \"p\", \"p\", \" \"],\n       [\"\
          L\", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n       [\" \", \"\
          \ \", \" \", \" \", \" \", \" \", \" \", \" \"],\n       [\"p\", \" \",
          \" \", \" \", \" \", \" \", \"p\", \" \"],\n       [\" \", \" \", \" \"
          , \" \", \"p\", \" \", \" \", \"T\"]])"
        format: python
      return: 1
  - testcases:
    - expression: toren([['p', ' ', ' ', 'p', ' ', 'p', ' ', ' '], ['p', ' ', ' ',
        'p', ' ', ' ', ' ', ' '], [' ', ' ', ' ', 'p', ' ', 'p', ' ', ' '], [' ',
        ' ', ' ', ' ', ' ', ' ', ' ', ' '], [' ', ' ', 'p', ' ', 'p', ' ', ' ', 'p'],
        [' ', ' ', ' ', 'T', ' ', 'p', ' ', ' '], [' ', ' ', ' ', ' ', ' ', ' ', 'p',
        ' '], ['p', ' ', ' ', 'p', ' ', ' ', ' ', ' ']])
      description:
        description: "toren([[\"p\", \" \", \" \", \"p\", \" \", \"p\", \" \", \"
          \"],\n       [\"p\", \" \", \" \", \"p\", \" \", \" \", \" \", \" \"],\n\
          \       [\" \", \" \", \" \", \"p\", \" \", \"p\", \" \", \" \"],\n    \
          \   [\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n       [\"\
          \ \", \" \", \"p\", \" \", \"p\", \" \", \" \", \"p\"],\n       [\" \",
          \" \", \" \", \"T\", \" \", \"p\", \" \", \" \"],\n       [\" \", \" \",
          \" \", \" \", \" \", \" \", \"p\", \" \"],\n       [\"p\", \" \", \" \"\
          , \"p\", \" \", \" \", \" \", \" \"]])"
        format: python
      return: 3
  - testcases:
    - expression: toren([[' ', ' ', ' ', ' ', ' ', 'p', ' ', ' '], [' ', ' ', ' ',
        ' ', 'L', 'T', ' ', ' '], ['p', ' ', ' ', ' ', ' ', ' ', 'L', ' '], [' ',
        ' ', ' ', 'p', ' ', ' ', ' ', ' '], [' ', ' ', ' ', ' ', ' ', ' ', ' ', '
        '], [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '], [' ', 'L', ' ', 'p', 'p', 'L',
        ' ', ' '], ['p', ' ', 'p', ' ', ' ', ' ', ' ', ' ']])
      description:
        description: "toren([[\" \", \" \", \" \", \" \", \" \", \"p\", \" \", \"
          \"],\n       [\" \", \" \", \" \", \" \", \"L\", \"T\", \" \", \" \"],\n\
          \       [\"p\", \" \", \" \", \" \", \" \", \" \", \"L\", \" \"],\n    \
          \   [\" \", \" \", \" \", \"p\", \" \", \" \", \" \", \" \"],\n       [\"\
          \ \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n       [\" \",
          \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n       [\" \", \"L\",
          \" \", \"p\", \"p\", \"L\", \" \", \" \"],\n       [\"p\", \" \", \"p\"\
          , \" \", \" \", \" \", \" \", \" \"]])"
        format: python
      return: 1
  - testcases:
    - expression: toren([['p', ' ', 'L', ' ', ' ', 'L', ' ', ' '], [' ', ' ', ' ',
        ' ', ' ', ' ', ' ', 'L'], ['T', ' ', ' ', 'L', ' ', ' ', ' ', ' '], [' ',
        ' ', ' ', ' ', ' ', ' ', ' ', ' '], [' ', ' ', ' ', ' ', ' ', 'p', ' ', '
        '], [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '], [' ', ' ', ' ', ' ', ' ', '
        ', ' ', ' '], [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ']])
      description:
        description: "toren([[\"p\", \" \", \"L\", \" \", \" \", \"L\", \" \", \"
          \"],\n       [\" \", \" \", \" \", \" \", \" \", \" \", \" \", \"L\"],\n\
          \       [\"T\", \" \", \" \", \"L\", \" \", \" \", \" \", \" \"],\n    \
          \   [\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n       [\"\
          \ \", \" \", \" \", \" \", \" \", \"p\", \" \", \" \"],\n       [\" \",
          \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n       [\" \", \" \",
          \" \", \" \", \" \", \" \", \" \", \" \"],\n       [\" \", \" \", \" \"\
          , \" \", \" \", \" \", \" \", \" \"]])"
        format: python
      return: 1
  - testcases:
    - expression: toren([[' ', ' ', ' ', ' ', 'p', ' ', ' ', ' '], [' ', ' ', ' ',
        'p', ' ', ' ', ' ', ' '], [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '], [' ',
        ' ', ' ', ' ', 'L', 'L', ' ', ' '], [' ', ' ', ' ', ' ', ' ', ' ', 'p', '
        '], [' ', ' ', ' ', ' ', 'L', ' ', 'p', ' '], [' ', ' ', ' ', 'T', ' ', '
        ', 'p', ' '], [' ', ' ', ' ', ' ', ' ', ' ', 'p', ' ']])
      description:
        description: "toren([[\" \", \" \", \" \", \" \", \"p\", \" \", \" \", \"
          \"],\n       [\" \", \" \", \" \", \"p\", \" \", \" \", \" \", \" \"],\n\
          \       [\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n    \
          \   [\" \", \" \", \" \", \" \", \"L\", \"L\", \" \", \" \"],\n       [\"\
          \ \", \" \", \" \", \" \", \" \", \" \", \"p\", \" \"],\n       [\" \",
          \" \", \" \", \" \", \"L\", \" \", \"p\", \" \"],\n       [\" \", \" \",
          \" \", \"T\", \" \", \" \", \"p\", \" \"],\n       [\" \", \" \", \" \"\
          , \" \", \" \", \" \", \"p\", \" \"]])"
        format: python
      return: 2
  - testcases:
    - expression: toren([[' ', ' ', ' ', ' ', ' ', 'p', ' ', ' '], [' ', ' ', ' ',
        'p', ' ', ' ', ' ', ' '], [' ', ' ', 'p', ' ', 'p', ' ', ' ', ' '], ['T',
        ' ', ' ', 'p', ' ', ' ', ' ', ' '], [' ', ' ', ' ', 'p', ' ', ' ', ' ', '
        '], [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '], [' ', ' ', ' ', ' ', ' ', '
        ', ' ', 'p'], [' ', ' ', 'p', ' ', ' ', 'p', ' ', ' ']])
      description:
        description: "toren([[\" \", \" \", \" \", \" \", \" \", \"p\", \" \", \"
          \"],\n       [\" \", \" \", \" \", \"p\", \" \", \" \", \" \", \" \"],\n\
          \       [\" \", \" \", \"p\", \" \", \"p\", \" \", \" \", \" \"],\n    \
          \   [\"T\", \" \", \" \", \"p\", \" \", \" \", \" \", \" \"],\n       [\"\
          \ \", \" \", \" \", \"p\", \" \", \" \", \" \", \" \"],\n       [\" \",
          \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n       [\" \", \" \",
          \" \", \" \", \" \", \" \", \" \", \"p\"],\n       [\" \", \" \", \"p\"\
          , \" \", \" \", \"p\", \" \", \" \"]])"
        format: python
      return: 1
  - testcases:
    - expression: toren([['L', ' ', ' ', ' ', ' ', ' ', ' ', ' '], [' ', ' ', ' ',
        ' ', ' ', ' ', ' ', ' '], [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '], ['L',
        ' ', 'T', ' ', ' ', ' ', ' ', ' '], ['L', ' ', ' ', ' ', ' ', ' ', ' ', '
        '], [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '], [' ', ' ', 'L', ' ', ' ', '
        ', ' ', ' '], [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ']])
      description:
        description: "toren([[\"L\", \" \", \" \", \" \", \" \", \" \", \" \", \"
          \"],\n       [\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n\
          \       [\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n    \
          \   [\"L\", \" \", \"T\", \" \", \" \", \" \", \" \", \" \"],\n       [\"\
          L\", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n       [\" \", \"\
          \ \", \" \", \" \", \" \", \" \", \" \", \" \"],\n       [\" \", \" \",
          \"L\", \" \", \" \", \" \", \" \", \" \"],\n       [\" \", \" \", \" \"
          , \" \", \" \", \" \", \" \", \" \"]])"
        format: python
      return: 0
  - testcases:
    - expression: toren([[' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '], [' ', ' ', 'L',
        ' ', ' ', ' ', ' ', ' '], [' ', ' ', ' ', ' ', 'p', ' ', ' ', ' '], [' ',
        ' ', ' ', 'p', ' ', ' ', ' ', 'p'], [' ', ' ', ' ', ' ', ' ', ' ', ' ', 'T'],
        [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '], [' ', ' ', ' ', ' ', ' ', ' ', '
        ', ' '], [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ']])
      description:
        description: "toren([[\" \", \" \", \" \", \" \", \" \", \" \", \" \", \"
          \"],\n       [\" \", \" \", \"L\", \" \", \" \", \" \", \" \", \" \"],\n\
          \       [\" \", \" \", \" \", \" \", \"p\", \" \", \" \", \" \"],\n    \
          \   [\" \", \" \", \" \", \"p\", \" \", \" \", \" \", \"p\"],\n       [\"\
          \ \", \" \", \" \", \" \", \" \", \" \", \" \", \"T\"],\n       [\" \",
          \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n       [\" \", \" \",
          \" \", \" \", \" \", \" \", \" \", \" \"],\n       [\" \", \" \", \" \"\
          , \" \", \" \", \" \", \" \", \" \"]])"
        format: python
      return: 1
  - testcases:
    - expression: toren([[' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '], [' ', 'p', ' ',
        'p', ' ', ' ', 'p', ' '], [' ', ' ', ' ', ' ', 'p', ' ', ' ', ' '], ['p',
        ' ', ' ', ' ', ' ', ' ', ' ', ' '], [' ', 'p', ' ', ' ', ' ', ' ', ' ', '
        '], [' ', ' ', ' ', ' ', ' ', ' ', 'p', ' '], ['p', ' ', ' ', ' ', ' ', '
        ', 'T', ' '], ['p', 'p', ' ', ' ', ' ', ' ', 'p', ' ']])
      description:
        description: "toren([[\" \", \" \", \" \", \" \", \" \", \" \", \" \", \"
          \"],\n       [\" \", \"p\", \" \", \"p\", \" \", \" \", \"p\", \" \"],\n\
          \       [\" \", \" \", \" \", \" \", \"p\", \" \", \" \", \" \"],\n    \
          \   [\"p\", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n       [\"\
          \ \", \"p\", \" \", \" \", \" \", \" \", \" \", \" \"],\n       [\" \",
          \" \", \" \", \" \", \" \", \" \", \"p\", \" \"],\n       [\"p\", \" \",
          \" \", \" \", \" \", \" \", \"T\", \" \"],\n       [\"p\", \"p\", \" \"\
          , \" \", \" \", \" \", \"p\", \" \"]])"
        format: python
      return: 3
  - testcases:
    - expression: toren([[' ', ' ', ' ', 'L', ' ', ' ', ' ', ' '], [' ', 'p', ' ',
        ' ', 'p', ' ', 'p', ' '], [' ', ' ', 'p', ' ', ' ', 'p', ' ', ' '], [' ',
        ' ', ' ', ' ', ' ', 'p', 'p', ' '], [' ', ' ', ' ', ' ', ' ', ' ', ' ', 'L'],
        [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '], [' ', 'L', ' ', ' ', 'L', ' ', '
        ', 'T'], [' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p']])
      description:
        description: "toren([[\" \", \" \", \" \", \"L\", \" \", \" \", \" \", \"
          \"],\n       [\" \", \"p\", \" \", \" \", \"p\", \" \", \"p\", \" \"],\n\
          \       [\" \", \" \", \"p\", \" \", \" \", \"p\", \" \", \" \"],\n    \
          \   [\" \", \" \", \" \", \" \", \" \", \"p\", \"p\", \" \"],\n       [\"\
          \ \", \" \", \" \", \" \", \" \", \" \", \" \", \"L\"],\n       [\" \",
          \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n       [\" \", \"L\",
          \" \", \" \", \"L\", \" \", \" \", \"T\"],\n       [\" \", \" \", \" \"\
          , \" \", \" \", \" \", \" \", \"p\"]])"
        format: python
      return: 1
  - testcases:
    - expression: toren([[' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '], [' ', ' ', ' ',
        ' ', ' ', ' ', ' ', ' '], [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '], [' ',
        ' ', 'p', ' ', ' ', ' ', ' ', 'L'], [' ', ' ', ' ', ' ', ' ', ' ', ' ', '
        '], [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '], [' ', 'T', ' ', ' ', ' ', '
        ', ' ', ' '], [' ', ' ', ' ', ' ', ' ', ' ', 'L', ' ']])
      description:
        description: "toren([[\" \", \" \", \" \", \" \", \" \", \" \", \" \", \"
          \"],\n       [\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n\
          \       [\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n    \
          \   [\" \", \" \", \"p\", \" \", \" \", \" \", \" \", \"L\"],\n       [\"\
          \ \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n       [\" \",
          \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n       [\" \", \"T\",
          \" \", \" \", \" \", \" \", \" \", \" \"],\n       [\" \", \" \", \" \"\
          , \" \", \" \", \" \", \"L\", \" \"]])"
        format: python
      return: 0
  - testcases:
    - expression: toren([[' ', 'L', 'p', ' ', ' ', 'L', 'p', 'p'], [' ', ' ', 'p',
        ' ', ' ', ' ', ' ', ' '], [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '], [' ',
        ' ', ' ', ' ', ' ', ' ', ' ', ' '], [' ', ' ', ' ', 'T', 'p', ' ', ' ', 'p'],
        [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '], ['p', 'p', 'p', ' ', ' ', ' ', '
        ', ' '], [' ', 'p', ' ', ' ', ' ', 'p', ' ', ' ']])
      description:
        description: "toren([[\" \", \"L\", \"p\", \" \", \" \", \"L\", \"p\", \"\
          p\"],\n       [\" \", \" \", \"p\", \" \", \" \", \" \", \" \", \" \"],\n\
          \       [\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n    \
          \   [\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n       [\"\
          \ \", \" \", \" \", \"T\", \"p\", \" \", \" \", \"p\"],\n       [\" \",
          \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n       [\"p\", \"p\",
          \"p\", \" \", \" \", \" \", \" \", \" \"],\n       [\" \", \"p\", \" \"\
          , \" \", \" \", \"p\", \" \", \" \"]])"
        format: python
      return: 1
