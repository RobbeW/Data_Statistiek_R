- tab: Feedback
  contexts:
  - testcases:
    - expression: toren([[' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '], [' ', ' ', ' ',
        'p', ' ', ' ', ' ', ' '], [' ', ' ', ' ', 'T', ' ', ' ', ' ', 'p'], [' ',
        ' ', ' ', ' ', ' ', ' ', ' ', ' '], [' ', ' ', ' ', ' ', ' ', ' ', ' ', '
        '], [' ', ' ', ' ', 'p', ' ', ' ', ' ', ' '], [' ', ' ', ' ', ' ', ' ', '
        ', ' ', ' '], [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ']])
      description:
        description: "toren([[\" \", \" \", \" \", \" \", \" \", \" \", \" \", \"
          \"],\n       [\" \", \" \", \" \", \"p\", \" \", \" \", \" \", \" \"],\n\
          \       [\" \", \" \", \" \", \"T\", \" \", \" \", \" \", \"p\"],\n    \
          \   [\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n       [\"\
          \ \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n       [\" \",
          \" \", \" \", \"p\", \" \", \" \", \" \", \" \"],\n       [\" \", \" \"
          , \" \", \" \", \" \", \" \", \" \", \" \"],\n       [\" \", \" \", \" \"\
          , \" \", \" \", \" \", \" \", \" \"]])"
        format: python
      return: 3
  - testcases:
    - expression: toren([[' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '], [' ', ' ', ' ',
        'p', ' ', ' ', ' ', ' '], [' ', ' ', 'p', 'L', 'p', ' ', ' ', ' '], [' ',
        'p', 'L', 'T', 'L', 'p', ' ', ' '], [' ', ' ', 'p', 'L', 'p', ' ', ' ', '
        '], [' ', ' ', ' ', 'p', ' ', ' ', ' ', ' '], [' ', ' ', ' ', ' ', ' ', '
        ', ' ', ' '], [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ']])
      description:
        description: "toren([[\" \", \" \", \" \", \" \", \" \", \" \", \" \", \"
          \"],\n       [\" \", \" \", \" \", \"p\", \" \", \" \", \" \", \" \"],\n\
          \       [\" \", \" \", \"p\", \"L\", \"p\", \" \", \" \", \" \"],\n    \
          \   [\" \", \"p\", \"L\", \"T\", \"L\", \"p\", \" \", \" \"],\n       [\"\
          \ \", \" \", \"p\", \"L\", \"p\", \" \", \" \", \" \"],\n       [\" \",
          \" \", \" \", \"p\", \" \", \" \", \" \", \" \"],\n       [\" \", \" \"
          , \" \", \" \", \" \", \" \", \" \", \" \"],\n       [\" \", \" \", \" \"\
          , \" \", \" \", \" \", \" \", \" \"]])"
        format: python
      return: 0
  - testcases:
    - expression: toren([[' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '], [' ', ' ', ' ',
        'p', ' ', ' ', ' ', ' '], [' ', ' ', 'L', 'p', 'p', ' ', ' ', ' '], ['p',
        'p', ' ', 'T', ' ', 'p', 'L', ' '], [' ', ' ', ' ', ' ', ' ', ' ', ' ', '
        '], [' ', ' ', ' ', 'L', ' ', ' ', ' ', ' '], [' ', ' ', ' ', 'p', ' ', '
        ', ' ', ' '], [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ']])
      description:
        description: "toren([[\" \", \" \", \" \", \" \", \" \", \" \", \" \", \"
          \"],\n       [\" \", \" \", \" \", \"p\", \" \", \" \", \" \", \" \"],\n\
          \       [\" \", \" \", \"L\", \"p\", \"p\", \" \", \" \", \" \"],\n    \
          \   [\"p\", \"p\", \" \", \"T\", \" \", \"p\", \"L\", \" \"],\n       [\"\
          \ \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n       [\" \",
          \" \", \" \", \"L\", \" \", \" \", \" \", \" \"],\n       [\" \", \" \"
          , \" \", \"p\", \" \", \" \", \" \", \" \"],\n       [\" \", \" \", \" \"\
          , \" \", \" \", \" \", \" \", \" \"]])"
        format: python
      return: 3
